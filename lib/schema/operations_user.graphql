query GetAuthenticatedUser {
    getAuthenticatedUser {
        id
        email
        fullName
        avatarUrl
        userHandle
        profileCompletionPercentage
        updatedAt
        createdAt
        seeksHelp
        offersHelp
        groupMemberships {
            id
            groupIdent
        }
    }
}

query FindUserSearch($userSearchId: String!) {
    findUserSearchById(userSearchId: $userSearchId) {
        runInfos {
            finishedAt
            matchCount
        }
    }
}

query FindUserSearchResults($userSearchId: String!, $options: FindObjectsOptions) {
    findUserSearchResults(userSearchId: $userSearchId, options: $options) {
        id
        email
        firstName
        lastName
        fullName
        avatarUrl
        userHandle
        offersHelp
        seeksHelp
        jobTitle
        cityOfResidence
        regionOfResidence
        countryOfResidence {
            translatedValue
        }
        groupMemberships {
            groupIdent
            ... on MentorsGroupMembership {
                expertises {
                    translatedValue
                }
                endorsements
            }
            ... on MenteesGroupMembership {
                soughtExpertises {
                    translatedValue
                }
            }
        }
        companies {
            name
        }
    }
}

query FindUserDetailedProfile($userId: String!) {
    findUserById(id: $userId) {
        id
        firstName
        lastName
        fullName
        email
        userHandle
        offersHelp
        seeksHelp
        websites {
            value
            label # label == "linkedin" for the linkedin button
        }
        preferredLanguage {
            textId
            translatedValue
        }
        spokenLanguages {
            textId
            translatedValue
        }
        avatarUrl # not yet functional
        groupMemberships {
            id
            groupIdent
            ... on MentorsGroupMembership {
                expertises {
                    textId
                    translatedValue
                    # icon not yet defined, coming later
                }
                industries {
                    textId
                    translatedValue
                    # icon not yet defined, coming later
                }
                endorsements # just a number for now, not yet defined as an object
                expectationsForMentees
                # TODO: implement mentoring preferences
            }
            ... on MenteesGroupMembership {
                soughtExpertises {
                    textId
                    translatedValue
                }
                industry {
                    textId
                    translatedValue
                }
                reasonsForStartingBusiness
                # business mission not defined, use companies[0].description instead
            }
        }
        jobTitle
        companies {
            id
            name # venture name
            description # "business mission" can be drawn from here for now
            websites {
                value # url
                label # type of website. might not be relevant
            }
            companyStage {
                textId
                translatedValue
            }
            # we may need to add city/state/country to this model for the mentee
        }
        pronounsDisplay # this handles some display logic, "she/they" for a user with both "they/them" and "she/her" pronouns
        pronouns {
            textId
            translatedValue # e.g. "she/her"
        }
        businessExperiences {
            id
            businessName
            jobTitle
            startDate
            endDate
            city
            state
            country
        }
        academicExperiences {
            id
            institutionName
            degreeType
            fieldOfStudy
            startDate
            endDate
        }
        cityOfResidence
        regionOfResidence
        countryOfResidenceTextId
        countryOfResidence {
            textId
            translatedValue
        }
        cityOfOrigin
        regionOfOrigin
        countryOfOriginTextId
        countryOfOrigin {
            textId
            translatedValue
        }
    }
}

query FindUserQuickViewProfile($userId: String!) {
    findUserById(id: $userId) {
        id
        avatarUrl
        fullName
        regionOfResidence
        cityOfResidence
        countryOfResidence {
            translatedValue
        }
        jobTitle
        companies {
            name
        }
        offersHelp
        seeksHelp
        groupMemberships {
            groupIdent
            ... on MenteesGroupMembership {
                soughtExpertises {
                    translatedValue
                }
            }
            ... on MentorsGroupMembership {
                expertises {
                    translatedValue
                }
            }
        }
    }
}

mutation BlockUserForMe($userId: String!, $notes: String, $reasonTextId: String) {
  blockUserForMe(userId: $userId, notes: $notes, reasonTextId: $reasonTextId)
}

mutation UnblockUserForMe($userId: String!) {
  unblockUserForMe(userId: $userId)
}

mutation CreateContentTag($input: ContentTagInput!) {
  createContentTag(input: $input) {
      id
  }
}

mutation UpdateContentTag($input: ContentTagInput!) {
  updateContentTag(input: $input) {
      id
  }
}

mutation DeleteContentTag($deletePhysically: Boolean!, $contentTagId: String!) {
  deleteContentTag(deletePhysically: $deletePhysically, contentTagId: $contentTagId) {
      id
  }
}

mutation CreateUserSearch($input: UserSearchInput!) {
    createUserSearch(input: $input) {
        id
    }
}

mutation SignInUser ($input: UserSignInInput!) {
    signInUser(input: $input) {
        userId
        deviceId
        authToken
    }
}

mutation SignOutUser {
    signMeOut
}

mutation SignUpUser ($input: UserSignUpInput!) {
    signUpUser(input: $input) {
        userId
        deviceId
        authToken
    }
}

mutation UpdateAcademicExperience($input: AcademicExperienceInput!) {
    updateAcademicExperience(input: $input) {
        id
    }
}

mutation UpdateBusinessExperience($input: BusinessExperienceInput!) {
    updateBusinessExperience(input: $input) {
        id
    }
}

mutation UpdateCompany($input: CompanyInput!) {
    updateCompany(input: $input) {
        id
    }
}

mutation UpdateMenteesGroupMembership($input: MenteesGroupMembershipInput!) {
    updateMenteesGroupMembership(input: $input) {
        id
    }
}

mutation UpdateMentorsGroupMembership($input: MentorsGroupMembershipInput!) {
    updateMentorsGroupMembership(input: $input) {
        id
    }
}

mutation UpdateUser ($input: UserInput!) {
    updateUser(input: $input)
}
